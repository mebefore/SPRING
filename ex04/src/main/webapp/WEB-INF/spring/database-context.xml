<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- <context:property-placeholder
		location="classpath:config/db.properties" /> -->
		
		<!-- 환경변수 저장 -->
		<!-- 암호할 진행할 bean이 해당 파일 해석해서 진행해야함 -->
	<bean id="environmentVariablesConfiguration"
		  class="org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig">
	   <property name="algorithm" value="PBEWithMD5AndDES" /> <!-- 얘를 기반으로 암호화 진행, 근데 알고리즘만 만들었다고 해도 암호화 되진 않음-->
	   <!-- 각각 암호화에 대한 유니크한 Key값 생성, key값 노출되면 보안 깨짐-->
	   <!-- key는 임의값, 변경가능 -->
	   <!--config 어쩌고에 등록한 그 값 (environment) -->
	   <property name="password" value="${jasypt.encryptor.password}" />
	</bean>
	
	
		<!--암호화 작업  -->
	<bean id="configurationEncryptor"
    		 class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
 	  <property name="config" ref="environmentVariablesConfiguration" />
	 </bean>
	 
	 
	 <!-- Properties 파일을 읽음 -->
	 <bean id="propertyConfigurer"
    		 class="org.jasypt.spring31.properties.EncryptablePropertyPlaceholderConfigurer">
			   <constructor-arg ref="configurationEncryptor" />
			   <property name="locations">
			     <list>
			       	<value>classpath:config/db.properties</value>
			     </list>
			   </property>
 	</bean>
	 
		
	<!-- datasource connection pool -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName" value="${driver}" />
		<property name="jdbcUrl" value="${url}" />
		<property name="username" value="${userid}" />
		<property name="password" value="${userpwd}" />
	</bean>

	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource"
		destroy-method="close">
		<constructor-arg ref="hikariConfig" />
	</bean>

	<!-- mybatis SqlSessionFactory -->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation"
			value="classpath:config/mybatis-config.xml" />
		<property name="mapperLocations"
			value="classpath*:com/yedam/web/**/mapper/*Mapper.xml" />
	</bean>

	<mybatis-spring:scan
		base-package="com.yedam.web.**.mapper" />

	<!-- TransactionManager bean 등록 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- @Transactional 어노테이션 처리 -->
	<tx:annotation-driven
		transaction-manager="transactionManager" />
		
</beans>
